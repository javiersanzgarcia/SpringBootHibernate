package springBootHibernate.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import springBootHibernate.domain.Customer;
import springBootHibernate.repository.CustomerRepository;

/**
 * Class Controller: Class to establish web services endpoints
 * @author Javier Sanz Garc√≠a
 *
 */
@RestController
@RequestMapping("/customer")
public class CustomerController {

	@Autowired
	CustomerRepository repo;

	/**
	 * Method to retrieve a complete list of Customers
	 * Endpoint example: http://localhost:8080/customer/findAll
	 * 
	 * @return Complete list of Customers
	 */
	@RequestMapping("/findAll")
	@ResponseBody
	public List<Customer> findAll() {
		return repo.findAll();
	}

	/**
	 * Method to retrieve a Customer searched by Customer Id
	 * Endpoint example:http://localhost:8080/customer/findbyId/1
	 * 
	 * @param id: Customer Id or numeric value
	 * @return Customer searched
	 */
	@RequestMapping(value = "/findbyId/{userid}", method = RequestMethod.GET)
	@ResponseBody
	public Customer findCustomerId(@PathVariable(value = "userid") Integer id) {
		return repo.findById(id);
	}

	/**
	 * Method to retrieve list of Customers searched by Customer name
	 * Endpoint example: http://localhost:8080/customer/findbyName?username=Javi
	 * 
	 * @param username: Customer name value or part of  Customer name value
	 * @return List of Customers searched
	 */
	@RequestMapping(value = "/findbyName", method = RequestMethod.GET)
	@ResponseBody
	public List<Customer> findCustomerName(@RequestParam(value = "username") String username) {
		return repo.findByName(username);
	}

	/**
	 * Method to retrieve list of Customers searched by Customer address
	 * Endpoint example: http://localhost:8080/customer/findbyAddress/asdf
	 * 
	 * @param useraddress: Customer address value or part of  Customer address value
	 * @return List of Customers searched
	 */
	@RequestMapping(value = "/findbyAddress/{useraddress}", method = RequestMethod.GET)
	@ResponseBody
	public List<Customer> findCustomerAddress(@PathVariable(value = "useraddress") String useraddress) {
		return repo.findByuserAddress(useraddress);
	}

	/**
	 * Method to retrieve list of Customers searched by Customer address
	 * Endpoint example: http://localhost:8080/customer/findbyPhone/6
	 * 
	 * @param userphone: Customer phone value or part of  Customer phone value
	 * @return List of Customers searched
	 */
	@RequestMapping(value = "/findbyPhone/{userphone}", method = RequestMethod.GET)
	@ResponseBody
	public List<Customer> findCustomerPhone(@PathVariable(value = "userphone") String userphone) {
		return repo.findByuserPhone(userphone);
	}

	// 
	// Remember %20 if you want a space in the any field, in this case Address
	
	
	/**
	 * Method to add Costumer, with parameters in the invocation of web service
	 * Endpoint example: http://localhost:8080/customer/addCostumer/javi/alskjasjkl%20casa/989898
	 * 
	 * @param username: Customer name value 
	 * @param useraddress: Customer address value 
	 * @param userphone: Customer phone value
	 * @return Costumer that previously have been inserted
	 */
	@RequestMapping(value = "/addCostumer/{username}/{useraddress}/{userphone}", method = RequestMethod.POST)
	@ResponseBody
	public Customer addCustomer(@PathVariable(value = "username") String username,
			@PathVariable(value = "useraddress") String useraddress,
			@PathVariable(value = "userphone") String userphone) {

		//Fake id, remember the autogenerated annotation in line 17 if Customer.java 
		Integer id = -1;
		Customer customer = new Customer(id, username, userphone, useraddress);

		repo.save(customer);

		// Get last element of the list, to see the last insertion
		List<Customer> lcostumers = repo.findAll();
		Customer output = lcostumers.get(lcostumers.size() - 1);

		return repo.findById(output.getId());
	}

	/**
	 * Method to add Costumer, with parameters in the invocation of web service
	 * Endpoint example: http://localhost:8080/customer/addCostumerBody
	 * 
	 * RequestBody example:
	 * 		{
	 *		"name":"Eloy",
	 *		"phone":"989898",
	 *		"address":"Avda"
	 *	} 
	 ** 
	 * @param customer: Json file sends in RequestBody 
	 * @return Costumer that previously have been inserted
	 */
	@RequestMapping(value = "/addCostumerBody", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public Customer addCustomer(@RequestBody Customer customer) {

		if (customer == null) {
			return new Customer();
		}

		repo.save(customer);

		// get last element of the list
		List<Customer> lcostumers = repo.findAll();
		Customer output = lcostumers.get(lcostumers.size() - 1);

		return repo.findById(output.getId());
	}

}
